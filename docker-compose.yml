version: '3'

services:
  web:
    build: .
    command: bash -c "python manage.py migrate --noinput && gunicorn sitechecker.wsgi --bind :8000"
    # command: >
    #   sh -c "python manage.py migrate &&
    #           python manage.py runserver 0.0.0.0:8000"
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
    # volumes:
    #   - static_volume:/app/static/
    networks:  # <-- here
      - nginx_network
      - db_network


  celery_check_worker:
    build: .
    command: bash -c 'celery -A sitechecker worker -l info -Q check_queue'
    environment:
      - C_FORCE_ROOT=true
    restart: always
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
    networks:  # <--
      - db_network

  celery_alert_worker:
    build: .
    command: bash -c 'celery -A sitechecker worker -l info -Q alert_queue'
    environment:
      - C_FORCE_ROOT=true
    restart: always
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
    networks:  # <--
      - db_network


  celery-beat:
    build: .
    command: celery -A sitechecker beat -l info
    restart: always
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
    networks:  # <--
      - db_network

  db:
    image: postgres:12.2
    environment:
        - POSTGRES_PASSWORD=8149547570
        - POSTGRES_USER=postgres
        - POSTGRES_DB=sitechecker
    restart: on-failure
    networks:
      - db_network

  redis:
    image: "redis:latest"
    ports:
      - '6379:6379'
    networks:  # <-- here
      - db_network

  nginx:
    image: nginx:latest
    volumes:
      - .:/app
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # - static_volume:/app/static/
      # - ./nginx.conf:/etc/nginx/nginx.conf:ro #read_only
    depends_on:
      - web
      - db
    ports:
      - "4000:4000"
    networks:  # <-- here
      - nginx_network

networks:
  nginx_network:
    driver: bridge
  db_network:
    driver: bridge

# volumes:
#   static_volume:
